{"ast":null,"code":"var _jsxFileName = \"/home/embrapa01/Documents/githubexplorer/src/pages/Dashboard/index.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { FiChevronRight } from 'react-icons/fi';\nimport api from '../../services/api';\nimport logoImg from \"../../assets/logo.svg\";\nimport { Title, Form, Repositories, Error } from './styles';\nimport Repository from '../Repository';\n\nconst Dashboard = () => {\n  const [newRepo, setNewRepo] = useState('');\n  const [inputError, setInputError] = useState('');\n  const [repositories, setRepositories] = useState([]);\n  useEffect(() => {\n    localStorage.setItem('@GithubExplorer:repositories', repositories);\n  }, [repositories]);\n\n  async function handleAddRepository(event) {\n    event.preventDefault();\n\n    if (!newRepo) {\n      setInputError('Digite o autor/nome do repositorio');\n      return;\n    }\n\n    try {\n      const response = await api.get(`repos/${newRepo}`);\n      const repository = response.data;\n      setRepositories([...repositories, repository]);\n      setNewRepo('');\n      setInputError('');\n    } catch (err) {\n      setInputError('Erro na busca desse reposit贸rio');\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"img\", {\n    src: logoImg,\n    alt: \"github Explorer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 3\n    }\n  }), /*#__PURE__*/React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 3\n    }\n  }, \"Explore reposit\\xF3rios no Github\"), /*#__PURE__*/React.createElement(Form, {\n    hasError: !!inputError,\n    onSubmit: handleAddRepository,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    value: newRepo,\n    onChange: e => setNewRepo(e.target.value),\n    placeholder: \"Digite o nome do reposit\\xF3rio\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, \"Pesquisar\")), inputError && /*#__PURE__*/React.createElement(Error, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 18\n    }\n  }, inputError), /*#__PURE__*/React.createElement(Repositories, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 3\n    }\n  }, repositories.map(repository => /*#__PURE__*/React.createElement(\"a\", {\n    key: repository.full_name,\n    href: \"teste\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: repository.owner.avatar_url,\n    alt: repository.owner.login,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, repository.full_name), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }, repository.description)), /*#__PURE__*/React.createElement(FiChevronRight, {\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  })))));\n};\n\nexport default Dashboard;","map":{"version":3,"sources":["/home/embrapa01/Documents/githubexplorer/src/pages/Dashboard/index.tsx"],"names":["React","useState","useEffect","FiChevronRight","api","Title","Form","Repositories","Error","Repository","Dashboard","newRepo","setNewRepo","inputError","setInputError","repositories","setRepositories","localStorage","setItem","handleAddRepository","event","preventDefault","response","get","repository","data","err","logoImg","e","target","value","map","full_name","owner","avatar_url","login","description"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, FormEvent } from 'react';\nimport { FiChevronRight } from 'react-icons/fi';\nimport api from '../../services/api';\n\nimport logoImg from '../../assets/logo.svg';\n\nimport { Title, Form, Repositories, Error } from './styles'\nimport Repository from '../Repository';\nimport { promises } from 'dns';\n\ninterface Repository {\n  full_name: string;\n  description: string;\n  owner : {\n    login:string;\n    avatar_url:string;\n\n  }\n}\n\nconst Dashboard: React.FC = () => {\n  const [newRepo, setNewRepo] = useState('')\n  const [inputError, setInputError] = useState('');\n  const [repositories, setRepositories] = useState<Repository[]>([]);\n\n  useEffect(() => {\n    localStorage.setItem('@GithubExplorer:repositories', repositories);\n  },[repositories] );\n\n  async function handleAddRepository(event: FormEvent<HTMLFormElement>): Promise<void>{\n    event.preventDefault();\n    if (!newRepo){\n      setInputError('Digite o autor/nome do repositorio');\n      return;\n    }\n\n    try{\n      const response = await api.get<Repository>(`repos/${newRepo}`);\n\n      const repository = response.data\n\n      setRepositories([...repositories, repository]);\n      setNewRepo('');\n      setInputError('');\n    }catch(err){\n      setInputError('Erro na busca desse reposit贸rio');\n    }\n  }\n\n  return (\n  <>\n  <img src = {logoImg} alt=\"github Explorer\" />\n  <Title>Explore reposit贸rios no Github</Title>\n\n  <Form hasError = {!! inputError} onSubmit = {handleAddRepository}>\n    <input value={newRepo} onChange = {(e) => setNewRepo(e.target.value)} placeholder = \"Digite o nome do reposit贸rio\"/>\n    <button type=\"submit\">Pesquisar</button>\n  </Form>\n\n  {inputError && <Error>{inputError}</Error>}\n\n  <Repositories>\n    {repositories.map(repository => (\n      <a key = {repository.full_name}href = \"teste\">\n        <img src = {repository.owner.avatar_url} alt= {repository.owner.login}/>\n        <div>\n          <strong>{repository.full_name}</strong>\n          <p>{repository.description}</p>\n        </div>\n        <FiChevronRight size = {20}/>\n      </a>\n     ))}\n\n  </Repositories>\n  </>\n  );\n};\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}